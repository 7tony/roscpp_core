message("Using @PROJECT_NAME@ @PKG_LOCATION@")
include(@INFRA_INSTALL_DIR@/parse_arguments.cmake)
include(@INFRA_INSTALL_DIR@/wg_python.cmake)
include(@INFRA_INSTALL_DIR@/debian-util.cmake)

macro(install_cmake_infrastructure PACKAGE_NAME)
  parse_arguments(PACKAGE 
    "VERSION;INCLUDE_DIRS;LIBRARIES;CFG_EXTRAS;MSG_DIRS;PYTHON_PATH" 
    "" 
    ${ARGN})

  message("install_cmake_infrastructure ${PACKAGE_NAME} at version ${PACKAGE_VERSION} in @CMAKE_INSTALL_PREFIX@")
  set(pfx ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_FILES_DIRECTORY})
  set(PACKAGE_NAME ${PACKAGE_NAME})
  set(PACKAGE_VERSION ${PACKAGE_VERSION})
  set(PACKAGE_INCLUDE_DIRS ${PACKAGE_INCLUDE_DIRS})
  set(PACKAGE_LIBRARIES ${PACKAGE_LIBRARIES})
  set(PACKAGE_CFG_EXTRAS ${PACKAGE_CFG_EXTRAS})
  set(PACKAGE_CMAKE_CONFIG_FILES_DIR ${CMAKE_INSTALL_PREFIX}/share/cmake/${PACKAGE_NAME})
  set(PACKAGE_MSG_DIRS ${PACKAGE_MSG_DIRS})
  set(PACKAGE_PYTHON_PATH ${PACKAGE_PYTHON_PATH})


  # in source
  set(PKG_INCLUDE_PREFIX ${CMAKE_CURRENT_SOURCE_DIR})
  set(PKG_LIB_PREFIX ${CMAKE_CURRENT_BINARY_DIR})
  set(PKG_MSG_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/msg)
  set(PKG_CMAKE_DIR ${CMAKE_CURRENT_BINARY_DIR}/cmake)
  set(PKG_BIN_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/scripts ${CMAKE_CURRENT_BINARY_DIR}/bin)
  set(PKG_LOCATION "from source (${CMAKE_CURRENT_SOURCE_DIR})")

  foreach(extra ${PACKAGE_CFG_EXTRAS})
    configure_file(${extra}.in
      cmake/${extra}
      @ONLY
      )
  endforeach()

  configure_file(@INFRA_INSTALL_DIR@/pkg-config.cmake.in
    cmake/${PACKAGE_NAME}-config.cmake
    @ONLY
    )
  configure_file(@INFRA_INSTALL_DIR@/pkg-config-version.cmake.in
    cmake/${PACKAGE_NAME}-config-version.cmake
    @ONLY
    )

  # installable
  set(PKG_INCLUDE_PREFIX ${CMAKE_INSTALL_PREFIX})
  set(PKG_LIB_PREFIX ${CMAKE_INSTALL_PREFIX})
  set(PKG_MSG_DIRS ${CMAKE_INSTALL_PREFIX}/share/msg/${PACKAGE_NAME})
  set(PKG_CMAKE_DIR ${CMAKE_INSTALL_PREFIX}/share/cmake/${PACKAGE_NAME})
  set(PKG_BIN_DIRS ${CMAKE_INSTALL_PREFIX}/bin)
  set(PKG_LOCATION "installed (${CMAKE_INSTALL_PREFIX})")

  set(INSTALLABLE_CFG_EXTRAS "")
  foreach(extra ${PACKAGE_CFG_EXTRAS})
    list(APPEND INSTALLABLE_CFG_EXTRAS ${CMAKE_CURRENT_BINARY_DIR}/cmake_install/${extra})
    configure_file(${extra}.in
      cmake_install/${extra}
      @ONLY
      )
  endforeach()

  configure_file(@INFRA_INSTALL_DIR@/pkg-config.cmake.in
    cmake_install/${PACKAGE_NAME}-config.cmake
    @ONLY
    )
  configure_file(@INFRA_INSTALL_DIR@/pkg-config-version.cmake.in
    cmake_install/${PACKAGE_NAME}-config-version.cmake
    @ONLY
    )

  install(FILES
    ${CMAKE_CURRENT_BINARY_DIR}/cmake_install/${PACKAGE_NAME}-config.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/cmake_install/${PACKAGE_NAME}-config-version.cmake
    ${INSTALLABLE_CFG_EXTRAS}
    DESTINATION share/cmake/${PACKAGE_NAME}
    )

  if (IS_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/debian)
    message(STATUS "${PROJECT_NAME}: Enabling deb target since directory 'debian' exists")
    add_custom_target(${PROJECT_NAME}-deb
      COMMAND dpkg-source -b ${CMAKE_CURRENT_SOURCE_DIR}
      WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
      )
  endif()
endmacro()

find_program(EMPY_EXECUTABLE empy)

macro(em_expand CONTEXT_FILE CMAKE_TEMPLATE_FILE)
  get_filename_component(CONTEXT_FILE_NOPATH ${CONTEXT_FILE} NAME)
  get_filename_component(CMAKE_TEMPLATE_FILE_NOPATH ${CMAKE_TEMPLATE_FILE} NAME)
  configure_file(${CONTEXT_FILE} ${CMAKE_CURRENT_BINARY_DIR}/${CONTEXT_FILE_NOPATH}.py)
  execute_process(COMMAND
    ${EMPY_EXECUTABLE}
    -F ${rosbuild_SOURCE_DIR}/empy_cmake.py
    -F ${CMAKE_CURRENT_BINARY_DIR}/${CONTEXT_FILE_NOPATH}.py
    -o ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_TEMPLATE_FILE_NOPATH}.cmake
    ${CMAKE_CURRENT_SOURCE_DIR}/${CMAKE_TEMPLATE_FILE}
    )
  message(STATUS "*** including ${CMAKE_BINARY_DIR}/${CMAKE_TEMPLATE_FILE_NOPATH}")
  include(${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_TEMPLATE_FILE_NOPATH}.cmake)
endmacro()

macro(md5sum OUTVAR SOMETHING)
  file(WRITE ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/tmp.md5sum "${SOMETHING}")
  execute_process(
    COMMAND md5sum ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/tmp.md5sum
    COMMAND cut -b1-32
    OUTPUT_VARIABLE ${OUTVAR}
    OUTPUT_STRIP_TRAILING_WHITESPACE)
endmacro()

macro(execute_code_string CODE_STRING)
  md5sum(STRINGSUM ${CODE_STRING})
  set(TMP_CODE_FILE ${CMAKE_CURRENT_BINARY_DIR}${CMAKE_FILES_DIRECTORY}/code_${STRINGSUM}.tmp)
  message("WRITING CODE TO ${TMP_CODE_FILE}")
  file(WRITE ${TMP_CODE_FILE} "${CODE_STRING}")
  message("INCLUDING ${TMP_CODE_FILE}")
  include(${TMP_CODE_FILE})
endmacro()



